# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import sqlite3
import datetime

from functions import *
from ui import Ui_MainWindow
from dialogs import *

from PyQt5 import QtCore, QtGui, QtWidgets, Qt as qt
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox, QFileDialog
from PyQt5.QtGui import QPen, QColor
from PyQt5.QtCore import Qt
from pyqtgraph import PlotWidget


class My_App(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.initMode1()
        self.initMode2()
        self.initMode3()

    # Tab 1 ----------------------------------------------------------------------------------------------------------------
    def initMode1(self):
        self.dialog1 = Dialog1()

        self.con = sqlite3.connect('db.sqlite')
        self.cur = self.con.cursor()
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setHorizontalHeaderLabels(['ID', 'Задание', 'С', 'По', 'Статус'])
        self.tableWidget.setRowCount(0)
        self.tableWidget.setTabKeyNavigation(True)

        self.update_table()

        self.tableWidget.cellDoubleClicked.connect(self.change_task)
        self.calendarWidget.selectionChanged.connect(self.update_table)
        self.pushButton.clicked.connect(self.delete_task_o)
        self.pushButton_2.clicked.connect(self.add_task_o)
        self.pushButton_3.clicked.connect(self.delete_task_a)
        self.pushButton_4.clicked.connect(self.add_task_a)
        self.pushButton_9.clicked.connect(self.res_curr_date)

    def update_table(self):
        date = self.calendarWidget.selectedDate().toString('dd-MM-yyyy')

        my_res = [i[0] for i in self.cur.execute("""SELECT * FROM checked_dates WHERE date = ?""", (date,))]
        if my_res == []:
            self.create_date(date)

        my_res = [[i[0], i[2], i[3], i[4], i[5]] for i in self.cur.execute("""SELECT * FROM tasks WHERE date = ?""",
                                                                           (date,))]
        self.tableWidget.setRowCount(0)
        for i1, row in enumerate(my_res):
            self.tableWidget.setRowCount(self.tableWidget.rowCount() + 1)
            for i2, elem in enumerate(row):
                self.tableWidget.setItem(i1, i2, QTableWidgetItem(str(elem).replace('\n', ' ')))
            if self.tableWidget.item(i1, 4).text() == '+':
                self.tableWidget.item(i1, 0).setBackground(QColor(220, 255, 220))
                self.tableWidget.item(i1, 4).setBackground(QColor(220, 255, 220))
            else:
                self.tableWidget.item(i1, 0).setBackground(QColor(255, 220, 220))
                self.tableWidget.item(i1, 4).setBackground(QColor(255, 220, 220))

    def create_date(self, date):
        self.cur.execute("INSERT INTO checked_dates VALUES(?)", (date,))
        my_res = [i for i in self.cur.execute("SELECT * FROM always_tasks")]
        for i in my_res:
            self.cur.execute("INSERT INTO tasks(date, task, frm, too, status, type) VALUES(?, ?, ?, ?, '-', 'a')",
                             (date, i[1], i[2], i[3]))
        self.con.commit()

    def delete_task_o(self):
        a = self.tableWidget.selectedItems()
        index = [str(i.row() + 1) for i in a]
        if index != []:
            value = QMessageBox.question(self, '', 'Действительно удалить элементы №' + ', '.join(index),
                                         QMessageBox.Yes, QMessageBox.No)
            if value == QMessageBox.Yes:
                self.cur.execute("DELETE FROM tasks WHERE id IN (" +
                                 ', '.join([self.tableWidget.item(int(i) - 1, 0).text() for i in index]) + ')')
                self.con.commit()

        self.update_table()

    def add_task_o(self):
        self.dialog1.set_params(self.calendarWidget.selectedDate().toString('dd-MM-yyyy'), 'o')  # english!!!
        self.dialog1.exec()

        self.update_table()

    def delete_task_a(self):
        dialog2 = Dialog2()

        dialog2.set_params(self.calendarWidget.selectedDate().toString('dd-MM-yyyy'))
        dialog2.exec()

        self.update_table()

    def add_task_a(self):
        self.dialog1.set_params(self.calendarWidget.selectedDate().toString('dd-MM-yyyy'), 'a')  # english!!!
        self.dialog1.exec()

        self.update_table()

    def res_curr_date(self):
        value = QMessageBox.question(self, '', 'Действительно сбросить ' +
                                     self.calendarWidget.selectedDate().toString('dd-MM-yyyy'),
                                     QMessageBox.Yes, QMessageBox.No)
        if value == QMessageBox.Yes:
            date = self.calendarWidget.selectedDate().toString('dd-MM-yyyy')
            self.cur.execute("DELETE FROM tasks WHERE date = ?", (date,))
            self.cur.execute("DELETE FROM checked_dates WHERE date = ?", (date,))
            self.con.commit()
            self.create_date(date)

            self.update_table()

    def change_task(self, y, x):
        if x == 1:
            a = Name_Dialog(self)
            a.set_val(self.tableWidget.item(y, x).text(), self.tableWidget.item(y, 0).text(),
                      '00-01-2000', t_type='o')
            a.exec()
            self.update_table()
        elif x == 2 or x == 3:
            a = Time_Dialog(self)
            a.set_val(self.tableWidget.item(y, x).text(), 'frm' if x == 2 else 'too',
                      self.tableWidget.item(y, 0).text(), '00-01-2000', t_type='o')
            a.exec()
        elif x == 4 or x == 0:
            if self.tableWidget.item(y, 4).text() == '-':
                self.cur.execute("UPDATE tasks SET status = '+' WHERE id = ?",
                                 (int(self.tableWidget.item(y, 0).text()),))
            else:
                self.cur.execute("UPDATE tasks SET status = '-' WHERE id = ?",
                                 (int(self.tableWidget.item(y, 0).text()),))
        self.con.commit()
        self.update_table()

    # Tab 2 ----------------------------------------------------------------------------------------------------------------
    def initMode2(self):
        self.file = ''

        try:
            self.folder = open('folder.txt', 'r', encoding='utf-8').read()
        except Exception:
            f = open('folder.txt', 'w', encoding='utf-8')
            f.write(os.curdir + 'saves')
            f.close()
            self.folder = open('folder.txt', 'r', encoding='utf-8').read()

        self.update_tips()
        self.pushButton_5.clicked.connect(self.change_folder)
        self.pushButton_6.clicked.connect(self.return_to_last_save)
        self.pushButton_7.clicked.connect(self.save_cur_text)
        self.pushButton_8.clicked.connect(self.save_as)
        self.pushButton_10.clicked.connect(self.create_tips)
        self.pushButton_11.clicked.connect(self.delete_tips)
        self.listWidget.itemClicked.connect(self.update_cur_text)

    def update_tips(self):
        try:
            files = filter(lambda x: x.endswith('.txt'), os.listdir(self.folder))
        except Exception:
            f = open('folder.txt', 'w', encoding='utf-8')
            f.write(os.curdir + '/saves')
            f.close()

            self.folder = open('folder.txt', 'r', encoding='utf-8').read()
            files = filter(lambda x: x.endswith('.txt'), os.listdir(self.folder))

        self.listWidget.clear()
        for i in files:
            self.listWidget.addItem(i[:-4])

    def delete_tips(self):
        if self.file != '':
            value = QMessageBox.question(self, '', "Действительно удалить '" + self.file + "'",
                                         QMessageBox.Yes, QMessageBox.No)
            if value == QMessageBox.Yes:
                os.remove(self.folder + '\\' + self.file)
                self.file = ''
                self.plainTextEdit.setPlainText('')
                self.update_tips()

    def create_tips(self):
        a = Tip_Name_Dialog(self)
        self.compl = False
        a.exec()
        if self.compl:
            try:
                self.plainTextEdit.setPlainText('')
                f = open(self.folder + '\\' + self.file, 'w', encoding='utf-8')
                f.close()
            except Exception:
                pass
            self.update_tips()

    def change_folder(self):
        self.save_text()
        value = QFileDialog.getExistingDirectory(self, 'Выберите папку с заметками', '')
        if value != '':
            self.folder = value
            self.update_tips()

    def update_cur_text(self, y):
        self.save_text()
        self.file = self.listWidget.currentItem().text() + '.txt'
        self.plainTextEdit.setPlainText(open(self.folder + '\\' + self.file, 'r', encoding='utf-8').read())

    def save_text(self):
        if self.file != '':
            f = open(self.folder + '\\' + self.file, 'w', encoding='utf-8')
            f.write(self.plainTextEdit.toPlainText())
            f.close()
            self.file = ''

    def save_as(self):
        if self.file != '':
            value = QFileDialog.getSaveFileName(self, 'Сохранить как', self.folder,
                                                'Текстовый документ (*.txt)')
            if value[0] != '':
                a = self.file
                self.file = value[0].split('/')[-1]
                self.save_text()
                self.file = a
                self.update_tips()

    def return_to_last_save(self):
        self.plainTextEdit.setPlainText(open(self.folder + '\\' + self.file, 'r', encoding='utf-8').read())

    def save_cur_text(self):
        if self.file != '':
            self.save_text()
            self.file = self.listWidget.currentItem().text() + '.txt'

    # Tab 3 ----------------------------------------------------------------------------------------------------------------
    def initMode3(self):
        self.date = str(datetime.date.today())

        self.dateEdit.setDate(QDate().fromString(delta2date(self.date, -5), 'yyyy-MM-dd'))
        self.dateEdit_2.setDate(QDate().fromString(delta2date(self.date, 5), 'yyyy-MM-dd'))

        self.plotWidget.setBackground((255, 255, 255))
        DateAxisItem(orientation='bottom').attachToPlotItem(self.plotWidget.getPlotItem())
        self.plotWidget.showGrid(x=True, y=False, alpha=255)

        self.update_graph()
        self.dateEdit.dateChanged.connect(self.update_graph)
        self.dateEdit_2.dateChanged.connect(self.update_graph)
        self.checkBox.clicked.connect(self.update_graph)
        self.checkBox_2.clicked.connect(self.update_graph)
        self.checkBox_3.clicked.connect(self.update_graph)

    def update_graph(self):
        try:
            self.plotWidget.clear()

            min_x = date2delta(self.date, self.dateEdit.date().toString('yyyy-MM-dd'))
            max_x = date2delta(self.date, self.dateEdit_2.date().toString('yyyy-MM-dd'))

            all_tasks, compl_tasks = self.get_tasks_list(min_x, max_x)
            max_y = max(all_tasks)
            part_tasks = [max_y * ((compl_tasks[i] / all_tasks[i]) if all_tasks[i] != 0 else 0)
                          for i in range(max_x + 1 - min_x)]

            if self.checkBox.isChecked():
                p1 = QPen(QColor(50, 50, 200, 175))
                p1.setWidthF(0.1)
                p1.setJoinStyle(qt.Qt.RoundJoin)
                self.plotWidget.plot([i for i in range(min_x, max_x + 1)], all_tasks, pen=p1)
            if self.checkBox_2.isChecked():
                p2 = QPen(QColor(200, 50, 50, 175))
                p2.setWidthF(0.1)
                p2.setJoinStyle(qt.Qt.RoundJoin)
                self.plotWidget.plot([i for i in range(min_x, max_x + 1)], compl_tasks, pen=p2)
            if self.checkBox_3.isChecked():
                p3 = QPen(QColor(50, 200, 50, 175))
                p3.setWidthF(0.1)
                p3.setJoinStyle(qt.Qt.RoundJoin)
                self.plotWidget.plot([i for i in range(min_x, max_x + 1)], part_tasks, pen=p3)

            self.plotWidget.setXRange(min_x, max_x)
            self.plotWidget.setYRange(0, max_y)
        except Exception:
            pass


    def get_tasks_list(self, l_date, r_date):
        dates = ['-'.join(delta2date(self.date, i).split('-')[::-1]) for i in range(l_date, r_date + 1)]

        all_tasks = [0 for i in range(l_date, r_date + 1)]
        compl_tasks = [0 for i in range(l_date, r_date + 1)]
        for i in self.cur.execute("SELECT * from tasks WHERE date IN ('" + "', '".join(dates) + "')"):
            i1 = dates.index(i[1])
            all_tasks[i1] += 1
            if i[5] == '+':
                compl_tasks[i1] += 1

        return all_tasks, compl_tasks

# Globals --------------------------------------------------------------------------------------------------------------
    # shortcuts
    def keyPressEvent(self, event):  # QtGui.QKeyEvent
        key = event.key()
        modif = int(event.modifiers())
        if self.tabWidget.currentIndex() == 0:
            if self.tableWidget.isActiveWindow():
                if modif == Qt.ControlModifier and key == Qt.Key_Delete:
                    self.delete_task_a()
                elif key == Qt.Key_Delete:
                    self.delete_task_o()
                elif modif == Qt.ControlModifier and (key == Qt.Key_Enter or key == 16777220):
                    self.add_task_a()
                elif key == Qt.Key_Enter or key == 16777220:
                    self.add_task_o()
            if self.calendarWidget.isActiveWindow():
                if modif == Qt.ControlModifier and key == Qt.Key_Right:
                    self.calendarWidget.showNextMonth()
                elif modif == Qt.ControlModifier and key == Qt.Key_Left:
                    self.calendarWidget.showPreviousMonth()
                if modif == Qt.ShiftModifier and key == Qt.Key_Delete:
                    self.res_curr_date()
        elif self.tabWidget.currentIndex() == 1:
            if modif == Qt.ControlModifier + Qt.ShiftModifier and key == Qt.Key_S:
                self.save_as()
            elif modif == Qt.ControlModifier and key == Qt.Key_S:
                self.save_text()
            elif modif == Qt.ControlModifier and key == Qt.Key_Z:
                self.return_to_last_save()
            elif key == Qt.Key_Delete:
                self.delete_tips()
            elif modif == Qt.ControlModifier and key == Qt.Key_N:
                self.create_tips()
        elif self.tabWidget.currentIndex() == 2:
            if modif == Qt.ControlModifier and key == Qt.Key_Right:
                self.dateEdit_2.setDate(QDate().fromString(delta2date(self.dateEdit_2.date().toString('yyyy-MM-dd'),
                                                                    1), 'yyyy-MM-dd'))
                self.dateEdit.setDate(QDate().fromString(delta2date(self.dateEdit.date().toString('yyyy-MM-dd'),
                                                                      1), 'yyyy-MM-dd'))
            elif modif == Qt.ControlModifier and key == Qt.Key_Left:
                self.dateEdit_2.setDate(QDate().fromString(delta2date(self.dateEdit_2.date().toString('yyyy-MM-dd'),
                                                                    -1), 'yyyy-MM-dd'))
                self.dateEdit.setDate(QDate().fromString(delta2date(self.dateEdit.date().toString('yyyy-MM-dd'),
                                                                      -1), 'yyyy-MM-dd'))
            elif modif == Qt.ShiftModifier and key == Qt.Key_Left:
                self.dateEdit.setDate(QDate().fromString(delta2date(self.dateEdit.date().toString('yyyy-MM-dd'),
                                                                    -1), 'yyyy-MM-dd'))
            elif modif == Qt.ShiftModifier and key == Qt.Key_Right:
                self.dateEdit.setDate(QDate().fromString(delta2date(self.dateEdit.date().toString('yyyy-MM-dd'),
                                                                      1), 'yyyy-MM-dd'))
            elif key == Qt.Key_Right:
                self.dateEdit_2.setDate(QDate().fromString(delta2date(self.dateEdit_2.date().toString('yyyy-MM-dd'),
                                                                    1), 'yyyy-MM-dd'))
            elif key == Qt.Key_Left:
                self.dateEdit_2.setDate(QDate().fromString(delta2date(self.dateEdit_2.date().toString('yyyy-MM-dd'),
                                                                      -1), 'yyyy-MM-dd'))
            self.update_graph()

    def do_nothing(self):
        pass

    def closeEvent(self, event):
        self.con.close()
        self.save_text()
        f = open('folder.txt', 'w', encoding='utf-8')
        f.write(self.folder)
        f.close()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = My_App()
    ex.show()
    sys.exit(app.exec_())